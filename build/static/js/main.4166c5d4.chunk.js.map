{"version":3,"sources":["components/Countries.js","components/All.js","App.js","serviceWorker.js","index.js"],"names":["Countries","props","handleChange","event","value","target","setState","state","data","fetch","then","response","json","setTimeout","componentWillMount","this","class","renderResults","results","Form","InputGroup","FormControl","type","onChange","name","placeholder","className","scope","map","el","country","cases","todayCases","recovered","deaths","todayDeaths","critical","active","casesPerOneMillion","Component","All","track","axios","get","catch","error","console","log","message","componentDidMount","role","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4166c5d4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport FilterResults from \"react-filter-search\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\n\nclass Countries extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      value: \"\"\n    };\n  }\n  componentWillMount() {\n    fetch(\"https://coronavirus-19-api.herokuapp.com/countries\")\n      .then(response => response.json())\n      .then(json => this.setState({ data: json }));\n    setTimeout(() => this.componentWillMount(), 500);\n  }\n  handleChange = event => {\n    const { value } = event.target;\n    this.setState({ value });\n  };\n  render() {\n    const { data, value } = this.state;\n    return (\n      <div class=\"container custom\">\n        <FilterResults\n          value={value}\n          data={data}\n          renderResults={results => (\n            <div class=\"card\">\n              <div class=\"card-header\">\n                <div class=\"row\">\n                  <div class=\"col-sm-12 col-md-4\">\n                    <Form>\n                      <InputGroup>\n                        <FormControl\n                          type=\"search\"\n                          onChange={this.handleChange}\n                          name=\"search\"\n                          placeholder=\"Search by country\"\n                          value={value}\n                        />\n                      </InputGroup>\n                    </Form>\n                  </div>\n                </div>\n              </div>\n              <div className=\"table-responsive\">\n                <table class=\"table\">\n                  <thead class=\"thead-light\">\n                    <tr>\n                      <th scope=\"col\">Countries</th>\n                      <th scope=\"col\">Cases</th>\n                      <th scope=\"col\">Recovered</th>\n                      <th scope=\"col\">Deaths</th>\n                      <th scope=\"col\">Critical</th>\n                      <th scope=\"col\">Active</th>\n                      <th scope=\"col\">Cases per 1 Million</th>\n                    </tr>\n                  </thead>{\" \"}\n                  <tbody>\n                    {results.map(el => (\n                      <>\n                        <tr>\n                          <td>{el.country}</td>\n\n                          <td>\n                            <div class=\"row\">\n                              <div class=\"col-sm-12\"> Total: {el.cases} </div>\n                              <div class=\"col-sm-12\">\n                                {\" \"}\n                                Today: {el.todayCases}{\" \"}\n                              </div>{\" \"}\n                            </div>\n                          </td>\n\n                          <td>{el.recovered}</td>\n                          <td>\n                            <div class=\"row\">\n                              <div class=\"col-sm-12\"> Total: {el.deaths} </div>\n                              <div class=\"col-sm-12\">\n                                {\" \"}\n                                Today: {el.todayDeaths}{\" \"}\n                              </div>{\" \"}\n                            </div>\n                          </td>\n                          <td>{el.critical}</td>\n                          <td>{el.active}</td>\n                          <td>{el.casesPerOneMillion}</td>\n                        </tr>\n                      </>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Countries;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nexport default class All extends Component {\n  state = { track: null };\n\n  async componentDidMount() {\n    axios\n      .get(`https://coronavirus-19-api.herokuapp.com/all`)\n      .then(response => this.setState({ track: response.data }))\n      .catch(function(error) {\n        console.log(\"Fetch error: \" + error.message);\n      });\n    setTimeout(() => this.componentDidMount(), 500);\n  }\n\n  render() {\n    const track = this.state.track;\n    if (track === null) {\n      return (\n        <div class=\"text-center\">\n          <div class=\"spinner-grow\" role=\"status\">\n            <span class=\"sr-only\">Loading</span>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <div class=\"jumbotron jumbotron-fluid\">\n          <div class=\"container\">\n            <div class=\"row\">\n              <div class=\"col-sm-12 col-md-3\">\n                <div class=\"card\">\n                  <div class=\"card-header\">\n                    Total Rates Worldwide{\" \"}\n                    <span class=\"badge badge-danger\">Live</span>\n                  </div>\n                  <ul class=\"list-group list-group-flush\">\n                    <li class=\"list-group-item\">\n                      Cases <div class=\"blue\">{track.cases}</div>\n                    </li>\n                    <li class=\"list-group-item\">\n                      Deaths <div class=\"red\">{track.deaths}</div>\n                    </li>\n                    <li class=\"list-group-item\">\n                      Recovered <div class=\"green\">{track.recovered}</div>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n\n              <div class=\"col-sm-12 col-md-9\">\n                <div class=\"card\">\n                  <div class=\"card-body\">\n                    <h5 class=\"card-title\">About this data</h5>\n                    <h6 class=\"card-subtitle mb-2 text-muted\">\n                      It changes rapidly\n                    </h6>\n                    <p class=\"card-text\">\n                      This data changes rapidly, so what’s shown may be out of\n                      date. Table totals may not always represent an accurate\n                      sum. Information about reported cases is also available on\n                      the{\" \"}\n                      <a href=\"https://www.who.int/emergencies/diseases/novel-coronavirus-2019/situation-reports\">\n                        World Health Organization\n                      </a>{\" \"}\n                      site.\n                    </p>\n                    <h6 class=\"card-subtitle mb-2 text-muted\">\n                      It doesn’t include all cases\n                    </h6>\n                    <p class=\"card-text\">\n                      Confirmed cases aren’t all cases. They only include people\n                      who tested positive. Testing rules and availability vary\n                      by country.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Countries from \"./components/Countries\";\nimport All from \"./components/All\";\nimport './App.css';\n\nclass App extends Component {\n\n  render(){\n  return (\n    <div className=\"App\">\n      <All/>\n      <Countries/>\n    </div>\n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}